Réponse P1.1:

Les vecteurs sont représentés par une classe.

On a choisi de mettre en attribut seulement les composantes (x, y, z, …) du vecteur représentées dans un tableau dynamique (vector). Cela facilite la définition des méthodes qui effectuent des opérations sur les vecteurs et qui nécessitent très souvent des boucles sur les composantes du vecteurs.

Pour le moment, on a choisi de mettre l’ensemble des méthodes en public et les attributs en private: 
Méthodes : 
    augmente():
    set_coord():
    affiche():
    compare():
    dim():
    addition():
    soustraction():
    oppose():
    mult():
    prod_scal():
    prod_vect():
    norme() :
    norme2() :
    unitaire()

Attributs:

tableau de double de la forme (x1, x2, …, xn) noté coordonnees.


Réponse P1.2:

On lance une exception pour les erreurs de dimension.

Réponse P4.1:

Nous n'ajoutons pas de constructeur de copie, celui par défaut convient pour l'instant puisquon veut seulement copier une à une les valeurs du tableau de coordonnees.

Réponse P4.2:

a] On peut ajouter un constructeur par coordonnées sphériques sans que cela ne change quoi que ce soit aux attributs.
b] ****aucune idée : des formules de conversion existent pour passer des coordonnées sphériques aux cartésiennes (pour garder des coordonnees cartesiennes en attributs). Cela implquerait seulement de rajouter un paramètre dans le constructeur, pour ne pas avoir deux constructeurs qui prennent comme arguments 3 'double'.

Réponse P4.3:

Pour affiche(), on introduit l'opérateur externe : std::ostream& operator<<(std::ostream& sortie, Vecteur const& vecteur);
Pour compare(), on introduit l'opérateur interne : bool Vecteur::operator==(Vecteur const& autre) const; //test d'egalite

P5??????????

Réponse P6.1:
Une toupie en cone simple EST UNE toupie, donc la classe ConeSimple est une classe-enfant de la classe Toupie. Elle hérite ainsi de tous les attributs et méthodes de la classe-parente Toupie.

Réponse P8.1: 
On souhaite que la methode dessine() ait un comportement polymorphique : dans notre cas, qu'elle s'adapte en fonction du support à dessin. On ne peut pas écrire une méthode dessine() commune à tous les dessinables.
Pour cela, dessine doit être une methode virtuelle pure.